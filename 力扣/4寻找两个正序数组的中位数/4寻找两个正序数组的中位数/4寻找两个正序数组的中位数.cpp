/*给定两个大小分别为 m 和 n 的正序（从小到大）数组 nums1 和 nums2。请你找出并返回这两个正序数组的 中位数 。

算法的时间复杂度应该为 O(log (m+n)) 。

示例 1：

输入：nums1 = [1,3], nums2 = [2]
输出：2.00000
解释：合并数组 = [1,2,3] ，中位数 2
示例 2：

输入：nums1 = [1,2], nums2 = [3,4]
输出：2.50000
解释：合并数组 = [1,2,3,4] ，中位数 (2 + 3) / 2 = 2.5*/
#include <iostream>
#include <vector>
#include <string>
#include <algorithm>
using namespace std;
class Solution {
public:
	double findMedianSortedArrays(vector<int>& nums1, vector<int>& nums2) {
		vector <int> v;
		vector <int>::iterator it1 = nums1.begin();
		vector <int>::iterator it2 = nums2.begin();
		while (it1 != nums1.end() && it2 != nums2.end())
		{
			if (*it1 <= *it2)
			{
				v.push_back(*it1);
				++it1;
			}
			else
			{
				v.push_back(*it2);
				++it2;
			}
		}
		while (it1 != nums1.end())
		{
			v.push_back(*it1);
			++it1;
		}
		while (it2 != nums2.end())
		{
			v.push_back(*it2);
			++it2;
		}
		int size = v.size();
		if (size == 0)
		{
			return 0;
		}
		else if (size == 1)
		{
			return v[0];
		}
		if (size % 2 != 0)
		{
			return v[(int)size / 2];
		}
		else
		{
			return (v[(int)size / 2] + v[(int)size / 2 - 1]) / (double)2;
		}
	}
};

class Solution_offical {
public:
	int getKthElement(const vector<int>& nums1, const vector<int>& nums2, int k) {
		/* 主要思路：要找到第 k (k>1) 小的元素，那么就取 pivot1 = nums1[k/2-1] 和 pivot2 = nums2[k/2-1] 进行比较
		* 这里的 "/" 表示整除
		* nums1 中小于等于 pivot1 的元素有 nums1[0 .. k/2-2] 共计 k/2-1 个
		* nums2 中小于等于 pivot2 的元素有 nums2[0 .. k/2-2] 共计 k/2-1 个
		* 取 pivot = min(pivot1, pivot2)，两个数组中小于等于 pivot 的元素共计不会超过 (k/2-1) + (k/2-1) <= k-2 个
		* 这样 pivot 本身最大也只能是第 k-1 小的元素
		* 如果 pivot = pivot1，那么 nums1[0 .. k/2-1] 都不可能是第 k 小的元素。把这些元素全部 "删除"，剩下的作为新的 nums1 数组
		* 如果 pivot = pivot2，那么 nums2[0 .. k/2-1] 都不可能是第 k 小的元素。把这些元素全部 "删除"，剩下的作为新的 nums2 数组
		* 由于我们 "删除" 了一些元素（这些元素都比第 k 小的元素要小），因此需要修改 k 的值，减去删除的数的个数
		*/

		int m = nums1.size();
		int n = nums2.size();
		int index1 = 0, index2 = 0;

		while (true) {
			// 边界情况
			if (index1 == m) {
				return nums2[index2 + k - 1];
			}
			if (index2 == n) {
				return nums1[index1 + k - 1];
			}
			if (k == 1) {
				return min(nums1[index1], nums2[index2]);
			}

			// 正常情况
			int newIndex1 = min(index1 + k / 2 - 1, m - 1);
			int newIndex2 = min(index2 + k / 2 - 1, n - 1);
			int pivot1 = nums1[newIndex1];
			int pivot2 = nums2[newIndex2];
			if (pivot1 <= pivot2) {
				k -= newIndex1 - index1 + 1;
				index1 = newIndex1 + 1;
			}
			else {
				k -= newIndex2 - index2 + 1;
				index2 = newIndex2 + 1;
			}
		}
	}

	double findMedianSortedArrays(vector<int>& nums1, vector<int>& nums2) {
		int totalLength = nums1.size() + nums2.size();
		if (totalLength % 2 == 1) {
			return getKthElement(nums1, nums2, (totalLength + 1) / 2);
		}
		else {
			return (getKthElement(nums1, nums2, totalLength / 2) + getKthElement(nums1, nums2, totalLength / 2 + 1)) / 2.0;
		}
	}
};


int main()
{
	vector<int> v1 = {1,2};
	vector<int> v2 = {3,4};
	Solution s;
	cout << s.findMedianSortedArrays(v1, v2) << endl;
	system("pause");
	return 0;
}